/**
 * Classe che gestisce lo splitter: qui viene mandata la coda, i cui elementi sono gestiti dalle corrispettive classi di 
 * di divisione.
 */

package logic;
import java.io.File;
import java.io.IOException;


public class Splitter {
	private File file;
	private String operazione;
	private int numero;
	private char ext;
	
	private Coda coda;
	protected AbstractSplitter[] jobs;
	
	/**
	 * Il costruttore inizializza la coda (privata) con quella passata per argomento
	 * @param c, coda creata tramite GUI. 
	 */
	
	public Splitter(Coda c){
		coda = c;	
	}
	
	/**
	 * La funzione start() scorre tramite un ciclo for la coda e, per ogni elemento, viene inizializzata la variabile elem,
	 * (inizialmente di tipo NBytes, classe padre di tutte le classi di divisione) con la classe di divisione specificata nel campo
	 * operazione e l'estensione richiesta nel campo extra. 
	 * La funzione chiama alla fine del for il metodo split(), comune a tutte le classi ma specificato per ognuna, così che
	 * con la stessa funzione vengono applicate le giuste modifiche a seconda dell'operazione scelta: questo è possibile grazie
	 * alla caratteristica di Java che è il polimorfismo.
	 * @throws IOException 
	 */
	
	public void start(){
		jobs = new AbstractSplitter[coda.getSize()];
		for (int i=0 ; i<coda.getSize() ; i++){
			
			operazione = coda.getOpIndex(i);
			numero = coda.getInfoIndex(i);
			ext = coda.getExtraIndex(i);
			file = coda.getFileIndex(i);
			AbstractSplitter elem = null;
			
			if (operazione == "#parti")
				elem = new NPar(file, numero);
			else
				switch(ext){
					case 'd': 
						elem = new NBytes(file, numero);
						break;
					case 'z': 
						elem = new Zip(file, numero);
						break;
				}
			jobs[i] = elem;
			jobs[i].run();
		}
	}
}
