package gui;
import logic.*;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

import java.awt.event.*;
import java.io.File;
import java.util.Vector;

/**
 * Classe per gestire il panel che contiene tutti i componenti grafici fondamentali:
 * <p>JTable(in uno JScrollPane), la JProgressBar, i pulsanti per interagire con i file e le JTextArea per 
 * inserire i dati necessari.
 * 
 * @author Alessandra
 */
@SuppressWarnings("serial")
public class MyPanel extends JPanel implements ActionListener{
	private String path = "C:/Users/Lenovo/Desktop/Tutto/Università/Secondo Anno 19-20/Secondo Semestre/Calcolo Numerico/Appunti/";
	private JTable table;
	private JTextField t1, t2;
	private JButton b, b1, b2, b3, b4;
	private JRadioButton rb1, rb2, rb3;
	private ButtonGroup bg1, bg2;
	private Avanzamento progressBarTot;
	private Coda c;
	private Vector<String> colNames;
	private Vector<Vector<Object>> data;
	
	private String s= null;
	private char extra = 'd';
	
	DefaultTableModel MyModel;
	private JFileChooser fc;
	private File[] fs = null;
	
	/**
	 * Il costruttore chiama tutte le funzioni che inseriscono i componenti nel panel e inizializza il vettore data
	 * e la coda per la JTable.
	 * 
	 */
	public MyPanel() {
		setLayout(null);
		setText();
		setButtons();
		data = new Vector<Vector<Object>>();
		setTable();	
		setActions();
		c = new Coda();
	}
	
	/**
	 * La funzione setText():
	 * <p>inserisce la JLabel label per la scritta "Inserisci modifiche:",
	 * <p>inserisce le JTextfield t1 e t2, i campi per inserire i numeri rispettivamente per il n° di parti o la dim delle parti
	 * <p>imposta i nomi delle colonne della JTable 
	 */
	private void setText(){
		JLabel label = new JLabel("Inserisci modifiche:");
		label.setBounds(490, 180, 180, 20);
		add(label);
		
		t1 = new JTextField();
		t1.setEditable(false);
		t1.setBounds(575, 230, 100, 20);
		add(t1);
		t1.setColumns(10);
		
		t2 = new JTextField();
		t2.setEditable(false);
		t2.setBounds(575, 260, 100, 20);
		add(t2);
		t2.setColumns(10);
		
		colNames = new Vector<String>();
		colNames.add("File"); colNames.add("Operazione"); colNames.add("Info");	colNames.add("Extra");
	}
	
	/**
	 * La funzione setTable() implementa il MyModel derivante dal DefaultTableModel.
	 * <p>Rendiamo le sue celle non editabili, così che si possa interagire con i file inseriti esclusivamente tramite i componenti
	 * previsti.
	 * 
	 * <p>Inoltre definisce lo JScrollPane, la modalità di selezione delle righe e la larghezza delle colonne.
	 */
	private void setTable(){
		MyModel = new DefaultTableModel(data, colNames){
			public boolean isCellEditable(int row, int column){
				return false;
			}
		};
		table = new JTable(MyModel);
		
		table.setRowSelectionAllowed(true);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(30, 30, 420, 500);
		add(scrollPane);
		scrollPane.setViewportView(table);
		
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
				
		table.getColumnModel().getColumn(0).setPreferredWidth(200);
		table.getColumnModel().getColumn(1).setPreferredWidth(110);
		table.getColumnModel().getColumn(2).setPreferredWidth(50);
		table.getColumnModel().getColumn(3).setPreferredWidth(50);
	}
	
	/**
	 * La funzione setButtons() imposta locazione e dimensioni dei bottoni e li inserisce nel JPanel.
	 * <p>Inserisce i JRadioButton delle opzioni "divisione per parti" e "divisione per dimensione" in un ButtonGroup così che soltanto
	 * una delle due opzioni può essere selezionata.
	 * <p>Inizialmente l'opzione di compressione non è abilitata. 
	 */
	private void setButtons(){
		b = new JButton("OK"); 			b.setBounds(620, 180, 80, 20); add(b);
		b1 = new JButton("Aggiungi"); 	b1.setBounds(480, 441, 100, 30); add(b1);
		b2 = new JButton("Elimina"); 	b2.setBounds(600, 441, 100, 30); add(b2);
		b3 = new JButton("Merge"); 		b3.setBounds(480, 482, 100, 30); add(b3); 
		b4 = new JButton("Avvia"); 		b4.setBounds(600, 482, 100, 30); add(b4);
		
		bg1 = new ButtonGroup();
		bg2 = new ButtonGroup();
		
		rb1 = new JRadioButton("N° parti"); 	rb1.setBounds(490, 230, 80, 20); add(rb1);	
		rb2 = new JRadioButton("N° bytes"); 	rb2.setBounds(490, 260, 80, 20); add(rb2);
		rb3 = new JRadioButton("Compressione"); rb3.setBounds(490, 290, 150, 20); add(rb3);
		
		bg1.add(rb1); bg1.add(rb2); bg2.add(rb3);
	}
	
	/**
	 * La funzione setActions aggiunge i ActionListener e i relativi ActionCommand ai bottoni del panel
	 */
	private void setActions(){
		b1.addActionListener(this); b1.setActionCommand("pb1");
		b2.addActionListener(this); b2.setActionCommand("pb2");
		b3.addActionListener(this); b3.setActionCommand("pb3");
		b4.addActionListener(this); b4.setActionCommand("pb4");
		b.addActionListener(this);  b.setActionCommand("pok");
				
		rb1.addActionListener(this); rb1.setActionCommand("prb1");
		rb2.addActionListener(this); rb2.setActionCommand("prb2");
		rb3.addActionListener(this); rb3.setActionCommand("prb3");
	}
	
	/**
	 * La funzione setProgressBar inizializza un oggetto di tipo Avanzamento, passandogli la dimensione della coda, ossia del
	 * numero di elementi su cui lavorare, ne stabilisce le dimensione e la aggiunge al Panel
	 */
	private void setProgressBar(){		
		progressBarTot = new Avanzamento(c.getSize());
		progressBarTot.setBounds(470, 120, 250, 25);
		add(progressBarTot);
		progressBarTot.setVisible(true);
	}
	
	/**
	 * La funzione setVisibleText serve ad abilitare le TextArea delle funzioni selezionate e cancella il testo di quella 
	 * non attiva
	 * 
	 * @param a booleano per decidere se abilitare o meno la TextArea t1
	 * @param b booleano per decidere se abilitare o meno la TextArea t2
	 * @param c booleano per decidere se cancellaro o meno il testo della TextArea t1
	 */
	private void setVisibleText(Boolean a, Boolean b, Boolean c, Boolean d){
		t1.setEditable(a);
		t2.setEditable(b);
		if (!c)
			t1.setText(null);
		if (!d)
			t2.setText(null);
	}
	
	/**
	 * La funzione setCZEnabled rende attivi o meno il bottone di compressione. È chiamata ogni volta che viene
	 * scelta una funzione tra divisione in parti e in bytes.
	 * 
	 * @param b booleano vero se sono selezionabili (divisione in bytes), falso altrimenti (divisione per parti)
	 */
	private void setCZEnabled(Boolean b){
		rb3.setEnabled(b);
	}
	
	/**
	 * La funzione fileChooser() apre la cartella predefinita dalla variabile path da cui far scegliere i file da modificare. 
	 * Se sono stati selezionati dei file, la lista di file viene salvata nell'array di File fs e passato alla coda per aggiungerli.
	 * Se non sono stati selezionati, svuota l'array di File fs.
	 */
	@SuppressWarnings("static-access")
	  private void fileChooser(){
	    fc = new JFileChooser(path);
	    fc.setMultiSelectionEnabled(true);
	   
	    int n = fc.showOpenDialog(MyPanel.this); 
	   	if (n==fc.APPROVE_OPTION){              
	   		fs = fc.getSelectedFiles();
	   		c.addFiles(fs);
	   	}
	   	else 
	   		fs = null;
	}
	
	/**
	 * La funzione actionPerformed decide l'azione da svolgere a seconda del bottone che è stato premuto:
	 * 
	 * <p><p>pb1 = bottone "aggiungi"
	 * 	<p>Viene invocata la funzione fileChooser e creato un vettore di oggetti. In un ciclo for il vettore viene inizializzato
	 *  e gli vengono aggiunti il nome del file e gli altri campi sono aggiunti come default (null, null, 'd').
	 *  Questi vengono poi aggiunti al vettore data della tabella.
	 *  Poi viene usato il Listener del MyModel della modifica dei file e viene aggiornata la tabella.
	 *  
	 * <p><p>pb2 = bottone "elimina"
	 *  <p>Viene inizializzata una variabile intera i col valore della riga selezionata (getRowSelected()). 
	 *  Se il valore di i è valido (diverso da -1) viene eliminato sia nella coda che nel vettore data della tabella e si può
	 *  "avvertire" la tabella che i suoi dati sono stati modificati con il Listener del MyModel e aggiornarla. 
	 *  Altrimenti compare un popup che avverte che nessuna riga è selezionata. 
	 *  
	 * <p><p>pb3 = bottone "merge"
	 * 	<p>Viene invocato il fileChooser e va selezionato il primo file generato (prima lettera 'd' o 'z'). Viene poi creato un 
	 *  oggetto di tipo Merger, che ha come parametro il file preso dal fileChooser. 
	 *  
	 * <p><p>pb4 = bottone "start"
	 * 	<p>Se la coda non è vuota, viene creato un oggetto di tipo Splitter e si invoca la sua funzione per far avviare 
	 *  la divisione. Altrimenti compare un popup che avverte che la coda è vuota. 
	 *  
	 * <p><p>pok = bottone "ok"
	 *  <p>Viene creata una variabile j che prende il valore di getRowSelected. Se è valida (ossia diversa da -1) e il valore
	 *  stringa è stato deciso (ossia è premuto uno dei bottoni principali "divisione per parti" o "divisione per bytes"), 
	 *  a seconda del valore di questa viene salvato in una variabile intera n il valore numerioc della corrispondente JTextArea. 
	 *  <p>L'elemento i-esimo della coda viene quindi modificato con l'operazione inserita e l'eventuale crittografia o compressione, 
	 *  il numero salvato in n e lasciando il file invariato. 
	 *  <p>Viene poi creato un Vector d il file corrispondente all'indice i, a cui vengono aggiunti i nuovi dati. 
	 *  <p>Questo viene poi sostituito al vecchio Vector di indice i nei data della tabella. 
	 *  La tabella viene avvertita delle modifiche grazie al Listener del MyModel e quindi aggiornata. 
	 *  
	 *  <p>Vengono poi resettati i componenti per l'immissione dei dati: le stringhe delle JTextArea vengono cancellate e disabilitate,
	 *  con la funzione setVisibleArea(), tutti i pulsanti radio deselezionati, quello di compressione disabilitato e 
	 *  il valore extra reimpostato a default. 
	 *  
	 * <p><p>prb1 = bottone radio "divisione per parti"
	 *  La stringa s è modificata in "#parti", la JTextArea t1 e abilitata alla modifica, la t2 no e il suo testo viene eliminato.
	 *  I bottoni di crittografia e compressione sono disabilitati.
	 *  
	 * <p><p>prb2 = bottone radio "divisione per bytes"
	 *  La stringa s è modificata in "#bytes", la JTextArea t2 e abilitata alla modifica, la t1 no e il suo testo viene eliminato.
	 *  I bottoni di crittografia e compressione sono abilitati.
	 *
	 * <p><p>prb3 = bottone radio "compressione"
	 *  Il carattere extra è modificato in 'z'
	 */
	@SuppressWarnings("static-access")
	@Override
	public void actionPerformed(ActionEvent e) {
		switch(e.getActionCommand()){
			case "pb1": 
				fileChooser();
				Vector<Object> v;
				for(int i=0 ; fs != null && i<fs.length; i++){
					v = new Vector<Object>();
					v.add(fs[i].getName());
					v.add(null);
					v.add(null);
					v.add(extra);
					data.add(v);
				}
				MyModel.fireTableDataChanged();
				table.revalidate();
				break;
				
			case "pb2": 
				int i = table.getSelectedRow();
				if(i==-1) 
					JOptionPane.showInputDialog("NESSUNA RIGA SELEZIONATA");
				else{
					System.out.println(c.getNameFile(i) + " eliminato!");
					c.deleteIndex(i);
					data.remove(i);
					MyModel.fireTableDataChanged();
					table.revalidate();
				}
				break;
				
			case "pb3": 
				fc = new JFileChooser(path);
				int fileSelezionato = fc.showOpenDialog(MyPanel.this); 
			    if (fileSelezionato==fc.APPROVE_OPTION){              
			    	Merger m = new Merger (fc.getSelectedFile());
			    	m.run();
			    }
				break;
				
				
			case "pb4": 
				if(c!=null){
					setProgressBar();
					Splitter splitter = new Splitter(c, progressBarTot);
					splitter.start();
				}
				else
					JOptionPane.showInputDialog("CODA VUOTA");
				break;
				
			case "pok":
				int j = table.getSelectedRow();
				if (j!=-1){
					int n = 0;
					if(s == "")
						JOptionPane.showInputDialog("DATI INCOMPLETI");
					
					else {
						if(s == "#parti")
							n = Integer.parseInt(t1.getText());
						if(s == "#bytes")
							n = Integer.parseInt(t2.getText());
						c.setElementoIndex(j, c.getFileIndex(j), s, n, extra);
						Vector <Object> d = new Vector <Object>();
						d.add(c.getNameFile(j));d.add(c.getOpIndex(j));
						d.add(c.getInfoIndex(j));d.add(c.getExtraIndex(j));
						data.set(j, d);
						MyModel.fireTableDataChanged();
						table.revalidate();
						
						bg1.clearSelection(); bg2.clearSelection();
						extra = 'd';
						setVisibleText(false,false,false,false);
						setCZEnabled(false);
					}
				}
				else
					JOptionPane.showInputDialog("FILE NON SELEZIONATO");
				break;
			
			case "prb1":
				s = "#parti";
				setVisibleText(true,false,true,false);
				setCZEnabled(false);
				break;
				
			case "prb2":
				setVisibleText(false,true,false,true);
				setCZEnabled(true);
				s = "#bytes";
				break;
				
			case "prb3":
				extra = 'z';
				break;
		}	
	}
	
	/**
	 * La funzione main crea un oggetto MyFrame, a cui viene aggiunto il MyPanel, e lo rende visibile.
	 */
	public static void main(String[] args) {
		MyFrame f = new MyFrame("Progetto 2019/20 OOP");
		MyPanel p = new MyPanel();
		f.getContentPane().add(p);
		
		f.setVisible(true);
	}
}
